//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace com.hb3344.ademco {

public class libademco {
  public static SWIGTYPE_p_int new_intp() {
    global::System.IntPtr cPtr = libademcoPINVOKE.new_intp();
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_int copy_intp(int value) {
    global::System.IntPtr cPtr = libademcoPINVOKE.copy_intp(value);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static void delete_intp(SWIGTYPE_p_int obj) {
    libademcoPINVOKE.delete_intp(SWIGTYPE_p_int.getCPtr(obj));
  }

  public static void intp_assign(SWIGTYPE_p_int obj, int value) {
    libademcoPINVOKE.intp_assign(SWIGTYPE_p_int.getCPtr(obj), value);
  }

  public static int intp_value(SWIGTYPE_p_int obj) {
    int ret = libademcoPINVOKE.intp_value(SWIGTYPE_p_int.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_unsigned_short new_uint16p() {
    global::System.IntPtr cPtr = libademcoPINVOKE.new_uint16p();
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_short copy_uint16p(ushort value) {
    global::System.IntPtr cPtr = libademcoPINVOKE.copy_uint16p(value);
    SWIGTYPE_p_unsigned_short ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_short(cPtr, false);
    return ret;
  }

  public static void delete_uint16p(SWIGTYPE_p_unsigned_short obj) {
    libademcoPINVOKE.delete_uint16p(SWIGTYPE_p_unsigned_short.getCPtr(obj));
  }

  public static void uint16p_assign(SWIGTYPE_p_unsigned_short obj, ushort value) {
    libademcoPINVOKE.uint16p_assign(SWIGTYPE_p_unsigned_short.getCPtr(obj), value);
  }

  public static ushort uint16p_value(SWIGTYPE_p_unsigned_short obj) {
    ushort ret = libademcoPINVOKE.uint16p_value(SWIGTYPE_p_unsigned_short.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int new_uint32p() {
    global::System.IntPtr cPtr = libademcoPINVOKE.new_uint32p();
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_unsigned_int copy_uint32p(uint value) {
    global::System.IntPtr cPtr = libademcoPINVOKE.copy_uint32p(value);
    SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
    return ret;
  }

  public static void delete_uint32p(SWIGTYPE_p_unsigned_int obj) {
    libademcoPINVOKE.delete_uint32p(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void uint32p_assign(SWIGTYPE_p_unsigned_int obj, uint value) {
    libademcoPINVOKE.uint32p_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static uint uint32p_value(SWIGTYPE_p_unsigned_int obj) {
    uint ret = libademcoPINVOKE.uint32p_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
    return ret;
  }

  public static SWIGTYPE_p_size_t new_size_tp() {
    global::System.IntPtr cPtr = libademcoPINVOKE.new_size_tp();
    SWIGTYPE_p_size_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_size_t(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_size_t copy_size_tp(uint value) {
    global::System.IntPtr cPtr = libademcoPINVOKE.copy_size_tp(value);
    SWIGTYPE_p_size_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_size_t(cPtr, false);
    return ret;
  }

  public static void delete_size_tp(SWIGTYPE_p_size_t obj) {
    libademcoPINVOKE.delete_size_tp(SWIGTYPE_p_size_t.getCPtr(obj));
  }

  public static void size_tp_assign(SWIGTYPE_p_size_t obj, uint value) {
    libademcoPINVOKE.size_tp_assign(SWIGTYPE_p_size_t.getCPtr(obj), value);
  }

  public static uint size_tp_value(SWIGTYPE_p_size_t obj) {
    uint ret = libademcoPINVOKE.size_tp_value(SWIGTYPE_p_size_t.getCPtr(obj));
    return ret;
  }

  public static uint ademco_version() {
    uint ret = libademcoPINVOKE.ademco_version();
    return ret;
  }

  public static string ademco_version_string() {
    string ret = libademcoPINVOKE.ademco_version_string();
    return ret;
  }

  public static void ademco_print(byte[] buff, uint len) {
    libademcoPINVOKE.ademco_print(buff, len);
  }

  public static byte ademco_encode_signal_strength(byte strength) {
    byte ret = libademcoPINVOKE.ademco_encode_signal_strength(strength);
    return ret;
  }

  public static byte ademco_decode_signal_strength(byte code) {
    byte ret = libademcoPINVOKE.ademco_decode_signal_strength(code);
    return ret;
  }

  public static int ademco_is_valid_account(string acct) {
    int ret = libademcoPINVOKE.ademco_is_valid_account(acct);
    return ret;
  }

  public static int ademco_is_machine_status_event(ademco_event_t ademco_event) {
    int ret = libademcoPINVOKE.ademco_is_machine_status_event((int)ademco_event);
    return ret;
  }

  public static int ademco_is_machine_type_event(ademco_event_t ademco_event) {
    int ret = libademcoPINVOKE.ademco_is_machine_type_event((int)ademco_event);
    return ret;
  }

  public static int ademco_is_event_need_control_source(ademco_event_t ademco_event) {
    int ret = libademcoPINVOKE.ademco_is_event_need_control_source((int)ademco_event);
    return ret;
  }

  public static ademco_event_level_t ademco_get_event_level(ademco_event_t ademco_event) {
    ademco_event_level_t ret = (ademco_event_level_t)libademcoPINVOKE.ademco_get_event_level((int)ademco_event);
    return ret;
  }

  public static ademco_event_t ademco_get_exception_event_by_recover_event(ademco_event_t recover_event) {
    ademco_event_t ret = (ademco_event_t)libademcoPINVOKE.ademco_get_exception_event_by_recover_event((int)recover_event);
    return ret;
  }

  public static string ademco_event_to_string(ademco_event_t ademco_event) {
    string ret = libademcoPINVOKE.ademco_event_to_string((int)ademco_event);
    return ret;
  }

  public static string ademco_event_to_string_chinese(ademco_event_t ademco_event) {
    string ret = libademcoPINVOKE.ademco_event_to_string_chinese((int)ademco_event);
    return ret;
  }

  public static uint ademco_append_data(byte[] packet, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone) {
    uint ret = libademcoPINVOKE.ademco_append_data(packet, acct, ademco_id, (int)ademco_event, gg, zone);
    return ret;
  }

  public static uint ademco_append_data2(ademco_data_t ademco_data, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone) {
    uint ret = libademcoPINVOKE.ademco_append_data2(ademco_data_t.getCPtr(ademco_data), acct, ademco_id, (int)ademco_event, gg, zone);
    return ret;
  }

  public static ademco_parse_result_t ademco_parse_data(byte[] packet, uint packet_len, ademco_data_t ademco_data, ademco_parse_error_t err) {
    ademco_parse_result_t ret = (ademco_parse_result_t)libademcoPINVOKE.ademco_parse_data(packet, packet_len, ademco_data_t.getCPtr(ademco_data), ademco_parse_error_t.getCPtr(err));
    return ret;
  }

  public static uint ademco_data_to_congwin_fe100(byte[] fe100, uint fe100_len, ademco_data_t ademco_data) {
    uint ret = libademcoPINVOKE.ademco_data_to_congwin_fe100(fe100, fe100_len, ademco_data_t.getCPtr(ademco_data));
    return ret;
  }

  public static void ademco_xdata_init(ademco_xdata_t xdata) {
    libademcoPINVOKE.ademco_xdata_init(ademco_xdata_t.getCPtr(xdata));
  }

  public static int ademco_xdata_convert(ademco_xdata_t xdata, ademco_xdata_length_format_t xlf) {
    int ret = libademcoPINVOKE.ademco_xdata_convert(ademco_xdata_t.getCPtr(xdata), (int)xlf);
    return ret;
  }

  public static uint ademco_xdata_get_valid_content_len(ademco_xdata_t xdata) {
    uint ret = libademcoPINVOKE.ademco_xdata_get_valid_content_len(ademco_xdata_t.getCPtr(xdata));
    return ret;
  }

  public static int ademco_xdata_memcmp(ademco_xdata_t xdata, SWIGTYPE_p_void buf, uint buf_len) {
    int ret = libademcoPINVOKE.ademco_xdata_memcmp(ademco_xdata_t.getCPtr(xdata), SWIGTYPE_p_void.getCPtr(buf), buf_len);
    return ret;
  }

  public static uint ademco_xdata_copy(ademco_xdata_t dst, ademco_xdata_t src) {
    uint ret = libademcoPINVOKE.ademco_xdata_copy(ademco_xdata_t.getCPtr(dst), ademco_xdata_t.getCPtr(src));
    return ret;
  }

  public static int ademco_make_xdata(ademco_xdata_t xdata, ademco_xdata_length_format_t xlf, ademco_xdata_transform_t xtr, byte[] content, uint len) {
    int ret = libademcoPINVOKE.ademco_make_xdata(ademco_xdata_t.getCPtr(xdata), (int)xlf, (int)xtr, content, len);
    return ret;
  }

  public static int ademco_is_valid_packet_id(string standard, string id, uint len) {
    int ret = libademcoPINVOKE.ademco_is_valid_packet_id(standard, id, len);
    return ret;
  }

  public static ademco_packet_id_t ademco_packet_id_from_string(string id, uint len) {
    ademco_packet_id_t ret = (ademco_packet_id_t)libademcoPINVOKE.ademco_packet_id_from_string(id, len);
    return ret;
  }

  public static string ademco_packet_id_to_string(ademco_packet_id_t id) {
    string ret = libademcoPINVOKE.ademco_packet_id_to_string((int)id);
    return ret;
  }

  public static uint ademco_make_empty_data_packet(byte[] dst_buff, uint len, string id, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_empty_data_packet(dst_buff, len, id, seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_adm_empty_data_packet(byte[] dst_buff, uint len, string id, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_adm_empty_data_packet(dst_buff, len, id, seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_null_packet(byte[] buff, uint len, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_null_packet(buff, len, seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_ack_packet(byte[] buff, uint len, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_ack_packet(buff, len, seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_nak_packet(byte[] buff, uint len, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_nak_packet(buff, len, seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_hb_packet(byte[] buff, uint len, ushort seq, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone, ademco_xdata_t xdata) {
    uint ret = libademcoPINVOKE.ademco_make_hb_packet(buff, len, seq, acct, ademco_id, (int)ademco_event, gg, zone, ademco_xdata_t.getCPtr(xdata));
    return ret;
  }

  public static uint ademco_make_adm_packet(byte[] buff, uint len, ushort seq, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone, ademco_xdata_t xdata) {
    uint ret = libademcoPINVOKE.ademco_make_adm_packet(buff, len, seq, acct, ademco_id, (int)ademco_event, gg, zone, ademco_xdata_t.getCPtr(xdata));
    return ret;
  }

  public static uint ademco_make_null_packet2(ademco_packet_t pkt, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_null_packet2(ademco_packet_t.getCPtr(pkt), seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_ack_packet2(ademco_packet_t pkt, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_ack_packet2(ademco_packet_t.getCPtr(pkt), seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_nak_packet2(ademco_packet_t pkt, ushort seq, string acct, uint ademco_id) {
    uint ret = libademcoPINVOKE.ademco_make_nak_packet2(ademco_packet_t.getCPtr(pkt), seq, acct, ademco_id);
    return ret;
  }

  public static uint ademco_make_hb_packet2(ademco_packet_t pkt, ushort seq, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone, ademco_xdata_t xdata) {
    uint ret = libademcoPINVOKE.ademco_make_hb_packet2(ademco_packet_t.getCPtr(pkt), seq, acct, ademco_id, (int)ademco_event, gg, zone, ademco_xdata_t.getCPtr(xdata));
    return ret;
  }

  public static uint ademco_make_adm_packet2(ademco_packet_t pkt, ushort seq, string acct, uint ademco_id, ademco_event_t ademco_event, byte gg, ushort zone, ademco_xdata_t xdata) {
    uint ret = libademcoPINVOKE.ademco_make_adm_packet2(ademco_packet_t.getCPtr(pkt), seq, acct, ademco_id, (int)ademco_event, gg, zone, ademco_xdata_t.getCPtr(xdata));
    return ret;
  }

  public static ademco_parse_result_t ademco_parse_packet(byte[] buff, uint len, ademco_packet_t pkt, SWIGTYPE_p_size_t cb_commited, ademco_parse_error_t err) {
    ademco_parse_result_t ret = (ademco_parse_result_t)libademcoPINVOKE.ademco_parse_packet(buff, len, ademco_packet_t.getCPtr(pkt), SWIGTYPE_p_size_t.getCPtr(cb_commited), ademco_parse_error_t.getCPtr(err));
    return ret;
  }

  public static ushort ademco_crc16(byte[] buff, uint len) {
    ushort ret = libademcoPINVOKE.ademco_crc16(buff, len);
    return ret;
  }

  public static uint ademco_hilo_array_to_dec_str(byte[] str, byte[] arr, uint len) {
    uint ret = libademcoPINVOKE.ademco_hilo_array_to_dec_str(str, arr, len);
    return ret;
  }

  public static uint ademco_hilo_array_to_hex_str(byte[] str, byte[] arr, uint len) {
    uint ret = libademcoPINVOKE.ademco_hilo_array_to_hex_str(str, arr, len);
    return ret;
  }

  public static uint ademco_dec_str_to_hilo_array(byte[] arr, uint len, string str) {
    uint ret = libademcoPINVOKE.ademco_dec_str_to_hilo_array(arr, len, str);
    return ret;
  }

  public static uint ademco_hex_str_to_hilo_array(byte[] arr, uint len, string str) {
    uint ret = libademcoPINVOKE.ademco_hex_str_to_hilo_array(arr, len, str);
    return ret;
  }

  public static uint ademco_hex_array_to_str(string str, byte[] arr, uint len) {
    uint ret = libademcoPINVOKE.ademco_hex_array_to_str(str, arr, len);
    return ret;
  }

  public static uint ademco_hex_str_to_array(byte[] arr, string str, byte padding) {
    uint ret = libademcoPINVOKE.ademco_hex_str_to_array(arr, str, padding);
    return ret;
  }

  public static uint ademco_hex_str_to_array_n(byte[] arr, string str, uint len, byte padding) {
    uint ret = libademcoPINVOKE.ademco_hex_str_to_array_n(arr, str, len, padding);
    return ret;
  }

  public static uint ademco_hex_str_to_array_n_allow_non_hex_str(byte[] arr, string str, uint len, byte padding) {
    uint ret = libademcoPINVOKE.ademco_hex_str_to_array_n_allow_non_hex_str(arr, str, len, padding);
    return ret;
  }

  public static uint hb_get_available_zone_properties_by_type(hb_machine_type_t type, SWIGTYPE_p_hb_zone_property_t props) {
    uint ret = libademcoPINVOKE.hb_get_available_zone_properties_by_type((int)type, SWIGTYPE_p_hb_zone_property_t.getCPtr(props));
    return ret;
  }

  public static ushort hb_get_max_zone_by_type(hb_machine_type_t type) {
    ushort ret = libademcoPINVOKE.hb_get_max_zone_by_type((int)type);
    return ret;
  }

  public static int hb_is_valid_zone_by_type(hb_machine_type_t type, ushort zone) {
    int ret = libademcoPINVOKE.hb_is_valid_zone_by_type((int)type, zone);
    return ret;
  }

  public static int hb_is_valid_zone_by_type_strict(hb_machine_type_t type, ushort zone) {
    int ret = libademcoPINVOKE.hb_is_valid_zone_by_type_strict((int)type, zone);
    return ret;
  }

  public static int hb_is_machine_on_sale(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_is_machine_on_sale((int)type);
    return ret;
  }

  public static int hb_machine_can_arm(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_arm((int)type);
    return ret;
  }

  public static int hb_machine_can_disarm(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_disarm((int)type);
    return ret;
  }

  public static int hb_machine_can_config(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_config((int)type);
    return ret;
  }

  public static int hb_machine_can_half_arm(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_half_arm((int)type);
    return ret;
  }

  public static int hb_machine_can_report_signal_strength(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_report_signal_strength((int)type);
    return ret;
  }

  public static int hb_machine_can_report_by_sms(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_report_by_sms((int)type);
    return ret;
  }

  public static int hb_machine_has_wired_zones(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_has_wired_zones((int)type);
    return ret;
  }

  public static ushort hb_wired_zone_min(hb_machine_type_t type) {
    ushort ret = libademcoPINVOKE.hb_wired_zone_min((int)type);
    return ret;
  }

  public static ushort hb_wired_zone_max(hb_machine_type_t type) {
    ushort ret = libademcoPINVOKE.hb_wired_zone_max((int)type);
    return ret;
  }

  public static int hb_machine_can_write_zone(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_write_zone((int)type);
    return ret;
  }

  public static int hb_machine_can_link_sub_machine(hb_machine_type_t type) {
    int ret = libademcoPINVOKE.hb_machine_can_link_sub_machine((int)type);
    return ret;
  }

  public static int hb_zone_can_report_lost(hb_zone_property_t zp) {
    int ret = libademcoPINVOKE.hb_zone_can_report_lost((int)zp);
    return ret;
  }

  public static void hb_machine_timer_init(hb_machine_timer_t timer) {
    libademcoPINVOKE.hb_machine_timer_init(hb_machine_timer_t.getCPtr(timer));
  }

  public static int hb_is_valid_time_point(hb_machine_time_point_t tp) {
    int ret = libademcoPINVOKE.hb_is_valid_time_point(hb_machine_time_point_t.getCPtr(tp));
    return ret;
  }

  public static void hb_time_point_to_greenwich(hb_machine_time_point_t tp) {
    libademcoPINVOKE.hb_time_point_to_greenwich(hb_machine_time_point_t.getCPtr(tp));
  }

  public static void hb_time_point_from_greenwich(hb_machine_time_point_t tp) {
    libademcoPINVOKE.hb_time_point_from_greenwich(hb_machine_time_point_t.getCPtr(tp));
  }

  public static int hb_is_valid_timer_one(hb_machine_timer_one_t timer) {
    int ret = libademcoPINVOKE.hb_is_valid_timer_one(hb_machine_timer_one_t.getCPtr(timer));
    return ret;
  }

  public static int hb_is_valid_machine_timer(hb_machine_timer_t timer) {
    int ret = libademcoPINVOKE.hb_is_valid_machine_timer(hb_machine_timer_t.getCPtr(timer));
    return ret;
  }

  public static void hb_machine_timer_to_greenwich(hb_machine_timer_t timer) {
    libademcoPINVOKE.hb_machine_timer_to_greenwich(hb_machine_timer_t.getCPtr(timer));
  }

  public static void hb_machine_timer_from_greenwich(hb_machine_timer_t timer) {
    libademcoPINVOKE.hb_machine_timer_from_greenwich(hb_machine_timer_t.getCPtr(timer));
  }

  public static ademco_event_t hb_machine_status_to_ademco_event(hb_machine_status_t status) {
    ademco_event_t ret = (ademco_event_t)libademcoPINVOKE.hb_machine_status_to_ademco_event((int)status);
    return ret;
  }

  public static hb_machine_status_t hb_machine_status_from_ademco_event(ademco_event_t ademco_event) {
    hb_machine_status_t ret = (hb_machine_status_t)libademcoPINVOKE.hb_machine_status_from_ademco_event((int)ademco_event);
    return ret;
  }

  public static ademco_event_t hb_machine_type_to_ademco_event(hb_machine_type_t type) {
    ademco_event_t ret = (ademco_event_t)libademcoPINVOKE.hb_machine_type_to_ademco_event((int)type);
    return ret;
  }

  public static hb_machine_type_t hb_machine_type_from_ademco_event(ademco_event_t ademco_event) {
    hb_machine_type_t ret = (hb_machine_type_t)libademcoPINVOKE.hb_machine_type_from_ademco_event((int)ademco_event);
    return ret;
  }

  public static ademco_event_t hb_zone_property_to_ademco_event(hb_zone_property_t zp) {
    ademco_event_t ret = (ademco_event_t)libademcoPINVOKE.hb_zone_property_to_ademco_event((int)zp);
    return ret;
  }

  public static string hb_machine_status_to_string(hb_machine_status_t status) {
    string ret = libademcoPINVOKE.hb_machine_status_to_string((int)status);
    return ret;
  }

  public static string hb_machine_type_to_string(hb_machine_type_t type) {
    string ret = libademcoPINVOKE.hb_machine_type_to_string((int)type);
    return ret;
  }

  public static string hb_zone_property_to_string(hb_zone_property_t zp) {
    string ret = libademcoPINVOKE.hb_zone_property_to_string((int)zp);
    return ret;
  }

  public static string hb_machine_status_to_string_chinese(hb_machine_status_t status) {
    string ret = libademcoPINVOKE.hb_machine_status_to_string_chinese((int)status);
    return ret;
  }

  public static string hb_machine_type_to_string_chinese(hb_machine_type_t type) {
    string ret = libademcoPINVOKE.hb_machine_type_to_string_chinese((int)type);
    return ret;
  }

  public static string hb_zone_property_to_string_chinese(hb_zone_property_t zp) {
    string ret = libademcoPINVOKE.hb_zone_property_to_string_chinese((int)zp);
    return ret;
  }

  public static string hb_get_zone_format_str(hb_machine_type_t type) {
    string ret = libademcoPINVOKE.hb_get_zone_format_str((int)type);
    return ret;
  }

  public static readonly int ADEMCO_ENABLE_CHINESE = libademcoPINVOKE.ADEMCO_ENABLE_CHINESE_get();
  public static readonly int ADEMCO_ENABLE_PARSE_ERROR = libademcoPINVOKE.ADEMCO_ENABLE_PARSE_ERROR_get();
  public static readonly int ADEMCO_VERSION_MAJOR = libademcoPINVOKE.ADEMCO_VERSION_MAJOR_get();
  public static readonly int ADEMCO_VERSION_MINOR = libademcoPINVOKE.ADEMCO_VERSION_MINOR_get();
  public static readonly int ADEMCO_VERSION_PATCH = libademcoPINVOKE.ADEMCO_VERSION_PATCH_get();
  public static readonly int ADEMCO_VERSION_IS_RELEASE = libademcoPINVOKE.ADEMCO_VERSION_IS_RELEASE_get();
  public static readonly string ADEMCO_VERSION_SUFFIX = libademcoPINVOKE.ADEMCO_VERSION_SUFFIX_get();
  public static readonly int ADEMCO_VERSION_HEX = libademcoPINVOKE.ADEMCO_VERSION_HEX_get();
  public static readonly int ADEMCO_OK = libademcoPINVOKE.ADEMCO_OK_get();
  public static readonly int ADEMCO_ERR = libademcoPINVOKE.ADEMCO_ERR_get();
  public static readonly int ADEMCO_PACKET_ACCT_MIN_LEN = libademcoPINVOKE.ADEMCO_PACKET_ACCT_MIN_LEN_get();
  public static readonly int ADEMCO_PACKET_ACCT_MAX_LEN = libademcoPINVOKE.ADEMCO_PACKET_ACCT_MAX_LEN_get();
  public static readonly int ADEMCO_PACKET_ACCT_MAC_LEN = libademcoPINVOKE.ADEMCO_PACKET_ACCT_MAC_LEN_get();
  public static readonly int ADEMCO_PACKET_PWD_MIN_LEN = libademcoPINVOKE.ADEMCO_PACKET_PWD_MIN_LEN_get();
  public static readonly int ADEMCO_PACKET_PWD_MAX_LEN = libademcoPINVOKE.ADEMCO_PACKET_PWD_MAX_LEN_get();
  public static readonly int ADEMCO_PACKET_DATA_SEGMENT_EMPTY_LEN = libademcoPINVOKE.ADEMCO_PACKET_DATA_SEGMENT_EMPTY_LEN_get();
  public static readonly int ADEMCO_PACKET_DATA_SEGMENT_FULL_LEN = libademcoPINVOKE.ADEMCO_PACKET_DATA_SEGMENT_FULL_LEN_get();
  public static readonly int ADEMCO_PACKET_DATA_SEGMENT_FULL_LEN_MAX = libademcoPINVOKE.ADEMCO_PACKET_DATA_SEGMENT_FULL_LEN_MAX_get();
  public static readonly int ADEMCO_PACKET_MAX_LEN = libademcoPINVOKE.ADEMCO_PACKET_MAX_LEN_get();
  public static readonly int CONGWIN_FE100_PACKET_LEN = libademcoPINVOKE.CONGWIN_FE100_PACKET_LEN_get();
  public static readonly int ADEMCO_PACKET_TIMESTAMP_LEN = libademcoPINVOKE.ADEMCO_PACKET_TIMESTAMP_LEN_get();
  public static readonly int ADEMCO_PACKET_XDATA_MAX_LEN = libademcoPINVOKE.ADEMCO_PACKET_XDATA_MAX_LEN_get();
  public static readonly int ADEMCO_ID_INVALID = libademcoPINVOKE.ADEMCO_ID_INVALID_get();
  public static readonly int ADEMCO_ID_MIN = libademcoPINVOKE.ADEMCO_ID_MIN_get();
  public static readonly int ADEMCO_ID_MAX = libademcoPINVOKE.ADEMCO_ID_MAX_get();
  public static readonly int ADEMCO_ID_SENTINEL = libademcoPINVOKE.ADEMCO_ID_SENTINEL_get();
  public static readonly int ADEMCO_ID_MASK = libademcoPINVOKE.ADEMCO_ID_MASK_get();
  public static readonly int ADEMCO_ZONE_FOR_MACHINE_SELF = libademcoPINVOKE.ADEMCO_ZONE_FOR_MACHINE_SELF_get();
  public static readonly int ADEMCO_ZONE_MIN = libademcoPINVOKE.ADEMCO_ZONE_MIN_get();
  public static readonly int ADEMCO_ZONE_MAX = libademcoPINVOKE.ADEMCO_ZONE_MAX_get();
  public static readonly int ADEMCO_ZONE_SENTINEL = libademcoPINVOKE.ADEMCO_ZONE_SENTINEL_get();
  public static readonly int ADEMCO_ZONE_MASK = libademcoPINVOKE.ADEMCO_ZONE_MASK_get();
  public static readonly int ADEMCO_GG_MIN = libademcoPINVOKE.ADEMCO_GG_MIN_get();
  public static readonly int ADEMCO_GG_MAX = libademcoPINVOKE.ADEMCO_GG_MAX_get();
  public static readonly int ADEMCO_GG_SENTINEL = libademcoPINVOKE.ADEMCO_GG_SENTINEL_get();
  public static readonly int ADEMCO_GG_MASK = libademcoPINVOKE.ADEMCO_GG_MASK_get();
  public static readonly int ADEMCO_SIGNAL_STRENGTH_MIN = libademcoPINVOKE.ADEMCO_SIGNAL_STRENGTH_MIN_get();
  public static readonly int ADEMCO_SIGNAL_STRENGTH_MAX = libademcoPINVOKE.ADEMCO_SIGNAL_STRENGTH_MAX_get();
  public static readonly string ADEMCO_PACKET_ID_NULL = libademcoPINVOKE.ADEMCO_PACKET_ID_NULL_get();
  public static readonly string ADEMCO_PACKET_ID_ACK = libademcoPINVOKE.ADEMCO_PACKET_ID_ACK_get();
  public static readonly string ADEMCO_PACKET_ID_NAK = libademcoPINVOKE.ADEMCO_PACKET_ID_NAK_get();
  public static readonly string ADEMCO_PACKET_ID_DUH = libademcoPINVOKE.ADEMCO_PACKET_ID_DUH_get();
  public static readonly string ADEMCO_PACKET_ID_HB = libademcoPINVOKE.ADEMCO_PACKET_ID_HB_get();
  public static readonly string ADEMCO_PACKET_ID_ADM_CID = libademcoPINVOKE.ADEMCO_PACKET_ID_ADM_CID_get();
  public static readonly string ADEMCO_PACKET_ID_MOD_REG = libademcoPINVOKE.ADEMCO_PACKET_ID_MOD_REG_get();
  public static readonly string ADEMCO_PACKET_ID_REG_RSP = libademcoPINVOKE.ADEMCO_PACKET_ID_REG_RSP_get();
  public static readonly string ADEMCO_RRCVR_DEFAULT = libademcoPINVOKE.ADEMCO_RRCVR_DEFAULT_get();
  public static readonly string ADEMCO_LPREF_DEFAULT = libademcoPINVOKE.ADEMCO_LPREF_DEFAULT_get();
  public static readonly char ADEMCO_PACKET_PREFIX = libademcoPINVOKE.ADEMCO_PACKET_PREFIX_get();
  public static readonly char ADEMCO_PACKET_SUFIX = libademcoPINVOKE.ADEMCO_PACKET_SUFIX_get();
  public static readonly int HB_3SECTION_MACHINE_GG_MIN = libademcoPINVOKE.HB_3SECTION_MACHINE_GG_MIN_get();
  public static readonly int HB_3SECTION_MACHINE_GG_MAX = libademcoPINVOKE.HB_3SECTION_MACHINE_GG_MAX_get();
}

}
